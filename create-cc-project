#! /bin/bash

print_help() {
	cat <<- EOM
	create-cc-project usage:
	Will create a C++ Project template in the directory with root 'project-name'.
	After writing source code in src/, compile using 'make', which
	will create the binaries in the bin/ folder and an executable named
	'project-name' inside the project root folder.
	Will also initialise git repo if git is installed

	create-cc-project [options] <project-name>

	options:
	  -h | --help				Help Screen
	  -d | --directory			Directory to create project root in (defaults to current dir)
	  -c | --compiler <arg>		C++ Compiler [g++, clang++, etc...]
	  -s | --std <arg>			C++ std (defaults to C++14)
	  -e | --ext <arg>			C++ file extension (defaults to .cc)
	  -b | --bin <arg>			name of file to store binary files in (defaults to bin)
	  -s | --src <arg>			name of file to store source files in (defaults to src)
	  -u | --remote-url <arg>	git remote url (optional, will initialise empty repo)
	EOM
}

compiler='g++'
std='C++14'
ext='.cc'
bin='bin'
src='src'

positional=()
while [[ $# -gt 0 ]]
do
	key="$1"
	case $key in
		-h|--help)
		print_help
		exit 0
		;;
		-d|--directory)
		directory="$2"
		shift # past argument
		shift # past value
		;;
		-c|--compiler)
		compiler="$2"
		shift
		shift
		;;
		-s|--std)
		std="$2"
		shift
		shift
		;;
		-e|--ext)
		ext="$2"
		shift
		shift
		;;
		-b|--bin)
		bin="$2"
		shift
		shift
		;;
		-s|--src)
		src="$2"
		shift
		shift
		;;
		-u|--remote-url)
		remote_url="$2"
		shift
		shift
		;;
		*)    # unknown option
		positional+=("$1") # save it in an array for later
		shift # past argument
		;;
	esac
done

if [[ ${#positional[@]} -ne 1 ]]
then
	>&2 echo 'Incorrect number of arguments, requires only one argument for project name.'
	exit 1
fi

project_name=${positional[0]}

if [[ ! -z $directory && $directory != */$ ]]
then
	directory=${directory}/
fi

project_path=$directory$project_name

echo "Creating Project $project_name...."

if [[ -d $project_path ]]
then
	>&2 echo "Project $project_name already exists in directory!"
	exit 1
fi

mkdir $project_path

mkdir $project_path/$bin
mkdir $project_path/$src

cat > $project_path/README.md << EOM
# $project_name
This is your project description.

## Compiling
Use 'make' to compile and link your project. The rules for make are found in Makefile.
This will create the binaries in the bin/ folder and an executable named 
'project-name' inside the project root folder.
EOM

cat > $project_path/Makefile << EOM
CXX = $compiler
# These are flags to pass to the compiler
CXXFLAGS = -std=$std -Wall -MMD -g # -g flag used for debugging, remove for final builds
EXEC = countdown-solver
# Linking flags
LDFLAGS = 

SOURCES = \$(shell find src -type f -name '*$ext')
OBJECTS = \${SOURCES:$src/%.cc=$bin/%.o}
DEPENDS = \${OBJECTS:.o=.d}

\$bin/%.o: \$src/%.cc
	\$(CXX) -c \$(CXXFLAGS) \$< -o $@

\${EXEC}: \${OBJECTS}
	\${CXX} \${OBJECTS} -o \${EXEC} \${LDFLAGS}

-include \${DEPENDS}

.PHONY: clean

clean:
	rm \${OBJECTS} \${DEPENDS} \${EXEC}
EOM

cat > $project_path/.gitignore << EOM
# Prerequisites
*.d

# Compiled Object files
*.slo
*.lo
*.o
*.obj

# Precompiled Headers
*.gch
*.pch

# Compiled Dynamic libraries
*.so
*.dylib
*.dll

# Compiled Static libraries
*.lai
*.la
*.a
*.lib

# Executables
*.exe
*.out
*.app
$project_name

# Folders
bin/*
EOM

git --version 2>&1 >/dev/null

if [[ $? -eq 0 ]]
then
	echo 'Initialising git repo.....'
	git init

	if [[ ! -z $remote_url ]]
	git remote add origin $remote_url
fi

echo 'Done!'
